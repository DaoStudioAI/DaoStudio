name: Nightly Build

on:
  schedule:
    - cron: '0 2 * * *'  # 2 AM UTC daily
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  SOLUTION_PATH: 'src/DaoStudio.sln'
  BUILD_CONFIGURATION: 'Release'

jobs:
  get-version:
    name: Get Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Get version
      id: get_version
      run: |
        VERSION=$(cat version.json | grep -oP '(?<="version": ")[^"]*')
        echo "version=$VERSION" >> $GITHUB_OUTPUT

  nightly-build:
    name: Nightly Build & Test
    needs: get-version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            runtime: win-x86
            artifact_name: DaoStudio-Windows-x86
          - os: windows-latest
            runtime: win-x64
            artifact_name: DaoStudio-Windows-x64
          - os: windows-latest
            runtime: win-arm64
            artifact_name: DaoStudio-Windows-ARM64
          - os: ubuntu-latest
            runtime: linux-x64
            artifact_name: DaoStudio-Linux-x64
          - os: ubuntu-latest
            runtime: linux-arm64
            artifact_name: DaoStudio-Linux-ARM64
          - os: macos-latest
            runtime: osx-x64
            artifact_name: DaoStudio-macOS-x64
          - os: macos-latest
            runtime: osx-arm64
            artifact_name: DaoStudio-macOS-ARM64
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

    - name: Run all tests
      run: dotnet test ${{ env.SOLUTION_PATH }} --configuration ${{ env.BUILD_CONFIGURATION }} --no-build --verbosity normal

    - name: Restore runtime dependencies
      run: dotnet restore src/DaoStudioUI/DesktopUI.csproj --runtime ${{ matrix.runtime }}

    - name: Build application (populate BuildOutput)
      run: dotnet build src/DaoStudioUI/DesktopUI.csproj --configuration ${{ env.BUILD_CONFIGURATION }} --runtime ${{ matrix.runtime }} --no-restore

    - name: Ensure mac dylibs exist
      if: matrix.os == 'macos-latest'
      run: |
        mkdir -p src/BuildOutput/Build
        touch src/BuildOutput/Build/libEGL.dylib
        touch src/BuildOutput/Build/libGLESv2.dylib
        touch src/BuildOutput/Build/libvk_swiftshader.dylib

    - name: Publish application
      run: dotnet publish src/DaoStudioUI/DesktopUI.csproj --configuration ${{ env.BUILD_CONFIGURATION }} --runtime ${{ matrix.runtime }} --self-contained true --output ./publish/${{ matrix.runtime }} -p:PublishSingleFile=false -p:PublishTrimmed=false -p:Version=${{ needs.get-version.outputs.version }}

    - name: Publish plugins
      shell: pwsh
      run: |
        $toolsDir = "src/Tools"
        $runtime = "${{ matrix.runtime }}"
        $isWindowsRuntime = $runtime.StartsWith("win-")
        $version = "${{ needs.get-version.outputs.version }}"
        
        # Get all tool directories (exclude PluginCommon as it's a library, not a plugin)
        $toolProjects = Get-ChildItem -Path $toolsDir -Directory | Where-Object { $_.Name -ne "PluginCommon" }
        
        foreach ($tool in $toolProjects) {
          $projectPath = Join-Path $tool.FullName "$($tool.Name).csproj"
          $outputPath = "./publish/$runtime/Plugins/$($tool.Name)"
          
          if (Test-Path $projectPath) {
            Write-Host "Publishing plugin: $($tool.Name)"
            
            # Restore dependencies for the specific runtime
            dotnet restore $projectPath --runtime $runtime
            
            # Check if this is BrowserTool which needs platform-specific framework
            if ($tool.Name -eq "BrowserTool" -and $isWindowsRuntime) {
              dotnet publish $projectPath --configuration ${{ env.BUILD_CONFIGURATION }} --runtime $runtime --framework net9.0-windows --no-self-contained --output $outputPath -p:Version=$version
            } elseif ($tool.Name -eq "BrowserTool") {
              dotnet publish $projectPath --configuration ${{ env.BUILD_CONFIGURATION }} --runtime $runtime --framework net9.0 --no-self-contained --output $outputPath -p:Version=$version
            } else {
              dotnet publish $projectPath --configuration ${{ env.BUILD_CONFIGURATION }} --runtime $runtime --no-self-contained --output $outputPath -p:Version=$version
            }
            
            if ($LASTEXITCODE -ne 0) {
              Write-Error "Failed to publish plugin: $($tool.Name)"
              exit 1
            }
          } else {
            Write-Warning "Project file not found: $projectPath"
          }
        }
        
        Write-Host "Successfully published $($toolProjects.Count) plugins"

    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        Compress-Archive -Path ./publish/${{ matrix.runtime }}/* -DestinationPath ./nightly-${{ matrix.artifact_name }}-${{ github.run_number }}.zip

    - name: Create archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd ./publish/${{ matrix.runtime }}
        zip -r ../../nightly-${{ matrix.artifact_name }}-${{ github.run_number }}.zip .
        cd ../..

    - name: Upload nightly artifact
      uses: actions/upload-artifact@v4
      with:
        name: nightly-${{ matrix.artifact_name }}-${{ github.run_number }}
        path: ./nightly-${{ matrix.artifact_name }}-${{ github.run_number }}.zip
        retention-days: 7

  notify-failure:
    name: Notify on Failure
    needs: nightly-build
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
    - name: Create issue on failure
      uses: actions/github-script@v8
      with:
        script: |
          const title = `Nightly build failed - ${new Date().toISOString().split('T')[0]}`;
          const body = `The nightly build workflow failed.\n\nRun: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['bug', 'automated', 'nightly-build']
          });

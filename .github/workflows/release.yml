name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true

permissions:
  contents: write
  pull-requests: write

env:
  DOTNET_VERSION: '9.0.x'
  SOLUTION_PATH: 'src/DaoStudio.sln'
  BUILD_CONFIGURATION: 'Release'

jobs:
  get-version:
    name: Get Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          # Extract version from version.json
          VERSION=$(cat version.json | grep -oP '(?<="version": ")[^"]*')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        fi

  build-and-publish:
    name: Build and Publish
    needs: get-version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            runtime: win-x86
            artifact_name: DaoStudio-Windows-x86
          - os: windows-latest
            runtime: win-x64
            artifact_name: DaoStudio-Windows-x64
          - os: windows-latest
            runtime: win-arm64
            artifact_name: DaoStudio-Windows-ARM64
          - os: ubuntu-latest
            runtime: linux-x64
            artifact_name: DaoStudio-Linux-x64
          - os: ubuntu-latest
            runtime: linux-arm64
            artifact_name: DaoStudio-Linux-ARM64
          - os: macos-latest
            runtime: osx-x64
            artifact_name: DaoStudio-macOS-x64
          - os: macos-latest
            runtime: osx-arm64
            artifact_name: DaoStudio-macOS-ARM64

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Publish application
      run: dotnet publish src/DaoStudioUI/DesktopUI.csproj --configuration ${{ env.BUILD_CONFIGURATION }} --runtime ${{ matrix.runtime }} --self-contained true --output ./publish/${{ matrix.runtime }} -p:PublishSingleFile=false -p:PublishTrimmed=false -p:Version=${{ needs.get-version.outputs.version }}

    - name: Publish plugins
      shell: pwsh
      run: |
        $toolsDir = "src/Tools"
        $runtime = "${{ matrix.runtime }}"
        $isWindowsRuntime = $runtime.StartsWith("win-")
        
        # Get all tool directories (exclude PluginCommon as it's a library, not a plugin)
        $toolProjects = Get-ChildItem -Path $toolsDir -Directory | Where-Object { $_.Name -ne "PluginCommon" }
        
        foreach ($tool in $toolProjects) {
          $projectPath = Join-Path $tool.FullName "$($tool.Name).csproj"
          $outputPath = "./publish/$runtime/Plugins/$($tool.Name)"
          
          if (Test-Path $projectPath) {
            Write-Host "Publishing plugin: $($tool.Name)"
            
            # Restore dependencies for the specific runtime
            dotnet restore $projectPath --runtime $runtime
            
            # Check if this is BrowserTool which needs platform-specific framework
            if ($tool.Name -eq "BrowserTool" -and $isWindowsRuntime) {
              dotnet publish $projectPath --configuration ${{ env.BUILD_CONFIGURATION }} --runtime $runtime --framework net9.0-windows --no-self-contained --output $outputPath -p:Version=${{ needs.get-version.outputs.version }}
            } elseif ($tool.Name -eq "BrowserTool") {
              dotnet publish $projectPath --configuration ${{ env.BUILD_CONFIGURATION }} --runtime $runtime --framework net9.0 --no-self-contained --output $outputPath -p:Version=${{ needs.get-version.outputs.version }}
            } else {
              dotnet publish $projectPath --configuration ${{ env.BUILD_CONFIGURATION }} --runtime $runtime --no-self-contained --output $outputPath -p:Version=${{ needs.get-version.outputs.version }}
            }
            
            if ($LASTEXITCODE -ne 0) {
              Write-Error "Failed to publish plugin: $($tool.Name)"
              exit 1
            }
          } else {
            Write-Warning "Project file not found: $projectPath"
          }
        }
        
        Write-Host "Successfully published $($toolProjects.Count) plugins"

    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        Compress-Archive -Path ./publish/${{ matrix.runtime }}/* -DestinationPath ./${{ matrix.artifact_name }}.zip

    - name: Create archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd ./publish/${{ matrix.runtime }}
        zip -r ../../${{ matrix.artifact_name }}.zip .
        cd ../..

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ./${{ matrix.artifact_name }}.zip

  create-release:
    name: Create Release
    needs: [get-version, build-and-publish]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ needs.get-version.outputs.version }}
        name: DaoStudio v${{ needs.get-version.outputs.version }}
        draft: true
        prerelease: false
        files: |
          ./artifacts/**/*.zip
        body: |
          ## DaoStudio v${{ needs.get-version.outputs.version }}
          
          ### Downloads
          Choose the appropriate package for your platform:
          - **Windows x86 (32-bit)**: DaoStudio-Windows-x86-v${{ needs.get-version.outputs.version }}.zip
          - **Windows x64 (64-bit)**: DaoStudio-Windows-x64-v${{ needs.get-version.outputs.version }}.zip
          - **Windows ARM64**: DaoStudio-Windows-ARM64-v${{ needs.get-version.outputs.version }}.zip
          - **Linux x64 (64-bit)**: DaoStudio-Linux-x64-v${{ needs.get-version.outputs.version }}.zip
          - **Linux ARM64**: DaoStudio-Linux-ARM64-v${{ needs.get-version.outputs.version }}.zip
          - **macOS Intel (x64)**: DaoStudio-macOS-x64-v${{ needs.get-version.outputs.version }}.zip
          - **macOS Apple Silicon (ARM64)**: DaoStudio-macOS-ARM64-v${{ needs.get-version.outputs.version }}.zip
          
          ### Installation
          1. Download the appropriate package for your platform
          2. Extract the archive
          3. Run the DaoStudio executable
          
          For more information, see the [README](https://github.com/${{ github.repository }}/blob/main/README.md).

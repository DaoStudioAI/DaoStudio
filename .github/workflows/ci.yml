name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  SOLUTION_PATH: 'src/DaoStudio.sln'
  BUILD_CONFIGURATION: 'Release'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json', '**/*.csproj') }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

    - name: Run unit tests
      if:  always()
      run: dotnet test ${{ env.SOLUTION_PATH }} --configuration ${{ env.BUILD_CONFIGURATION }} --no-build --verbosity normal --logger trx --collect:"XPlat Code Coverage" --filter "FullyQualifiedName!~Performance"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}
        path: '**/TestResults/**/*.trx'

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: matrix.os == 'windows-latest'
      with:
        name: coverage-reports
        path: '**/TestResults/**/coverage.cobertura.xml'

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

    - name: Run code analysis
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore /p:EnforceCodeStyleInBuild=true /p:TreatWarningsAsErrors=false

  # The publish-coverage job is commented out temporarily. To re-enable,
  # remove the leading '#' characters from this block and restore the
  # original `if:` condition (for example: github.event_name == 'push' && github.ref == 'refs/heads/main').
  #
  #publish-coverage:
  #  name: Publish Coverage
  #  runs-on: windows-latest
  #  needs: build-and-test
  #  if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #
  #  steps:
  #  - name: Checkout code
  #    uses: actions/checkout@v5
  #
  #  - name: Download coverage reports
  #    uses: actions/download-artifact@v5
  #    with:
  #      name: coverage-reports
  #      path: coverage
  #
  #  - name: Upload coverage to Codecov
  #    uses: codecov/codecov-action@v5
  #    with:
  #      files: coverage/**/coverage.cobertura.xml
  #      fail_ci_if_error: false
  #      verbose: true
